import com.android.build.gradle.api.BaseVariant
apply plugin: 'com.android.application'
apply plugin: 'walle'
apply from: 'tinkerpatch.gradle'
android {
    compileSdkVersion 28
    signingConfigs{
        debug{
            storeFile rootProject.file("keystore/debug.keystore")
            storePassword '123456'
            keyAlias 'debug0'
            v2SigningEnabled true
            keyPassword 'debug0'
        }
    }
    defaultConfig {
        applicationId "com.tinker.tinkerjdemo"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0-beta01'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.8',{changing=true}
    compileOnly 'com.tinkerpatch.tinker:tinker-android-anno:1.9.8',{changing=true}
    annotationProcessor 'com.tinkerpatch.tinker:tinker-android-anno:1.9.8',{changing=true}
    implementation "com.android.support:multidex:1.0.1"

    implementation 'com.meituan.android.walle:library:1.1.6'
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
    channelFile = new File("${project.getProjectDir()}/channel")
}

//String channel = WalleChannelReader.getChannel(this.getApplicationContext());

// 根据不同的applicationId来配置不同的channelFile／configFile
afterEvaluate {
    project.android.applicationVariants.all { BaseVariant variant ->
        variant.assemble.doFirst {
            if (variant.applicationId.endsWith(".debug")) {

                project.walle.channelFile = new File("${project.getProjectDir()}/channel_debug")
            }
        }
    }
}